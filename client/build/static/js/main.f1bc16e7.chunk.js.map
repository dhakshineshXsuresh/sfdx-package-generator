{"version":3,"sources":["components/AppHeader.js","components/MetadataType.js","components/ComponentList.js","context/reducer.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","button","title","AppHeader","classes","dispatch","useContext","GlobalContext","React","createElement","className","AppBar","position","Toolbar","Typography","variant","Button","color","onClick","updatePackageXML","type","startIcon","DescriptionIcon","copyToClipboard","FileCopyIcon","handleHowTo","console","log","HelpOutlineIcon","minWidth","fontSize","pos","marginBottom","MetadataType","globalState","filterKey","setFilterKey","useState","handleMetadataClick","evt","metadataType","stopPropagation","payload","Card","CardHeader","titleTypographyProps","action","Fragment","handleSelectAll","parNodeArr","skippedMetadataTypes","metadataTypes","map","inFolder","isChildXMLName","push","id","isSelected","isIndeterminate","length","sort","handleClearAll","CardContent","TextField","placeholder","value","onChange","event","fKey","target","size","InputProps","startAdornment","InputAdornment","SearchIcon","fullWidth","Paper","style","maxHeight","overflow","List","dense","component","aria-label","toUpperCase","includes","ListItem","key","selected","selectedMetadataType","ListItemIcon","Checkbox","edge","tabIndex","disableRipple","inputProps","checked","indeterminate","handleCheckboxChange","isChecked","ListItemText","primary","ListItemSecondaryAction","IconButton","NavigateNextIcon","ComponentList","_ref","isShowChildren","updateMetadataType","selectedChildrenArr","children","filter","child","text","FormGroup","FormControlLabel","control","handleComponentClick","compId","label","reducer","state","processInitialRequest","processInitialResponse","processMetadataTypeCheckBox","processMetadataTypeClick","processFetchChildrenResponse","processComponentCheckBox","processMetadataSelectAll","processMetadataClearAll","processUpdatePackageXml","processCopyToClipboard","processHowTo","vscode","postMessage","command","metadataObjects","mpExistingPackageXML","processChildXMLNames","obj1","obj2","xmlName","forEach","metadataObj","members","childArr","isWildChar","parNode","c","childName","isRefreshedFromServer","isParent","_objectSpread","combinedArr","i","childXmlNames","childXmlName","childObj","updatedChildren","newMetadataTypes","mTypeItr","message","results","metadataTypeId","childrenArr","Array","isArray","node","fullName","isParMetadataSelected","oldChildArr","selChildCount","oldChild","find","item","selectedMetadata","url","createContext","App","useReducer","prefersDarkMode","document","querySelector","classList","contains","preferredTheme","createMuiTheme","palette","useEffect","messageEventListener","data","window","addEventListener","removeEventListener","ThemeProvider","Provider","Grid","container","xs","Boolean","location","hostname","match","acquireVsCodeApi","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.f1bc16e7.chunk.js","sourcesContent":["import React,{useContext} from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { GlobalContext } from \"../App\";\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport DescriptionIcon from '@material-ui/icons/Description';\r\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\r\nimport HelpOutlineIcon from '@material-ui/icons/HelpOutline';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  button: {\r\n    marginRight: theme.spacing(1),\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n}));\r\n\r\nexport default function AppHeader() {\r\n  const classes = useStyles();\r\n  const { dispatch }= useContext(GlobalContext);\r\n\r\n  const updatePackageXML=()=>{\r\n    dispatch({type: \"UPDATE_PACKAGE_XML\"});\r\n  };\r\n\r\n  const copyToClipboard=()=>{\r\n    dispatch({type: \"COPY_TO_CLIPBOARD\"});\r\n  };\r\n\r\n  const handleHowTo = ()=>{\r\n    console.log('handleHowTo invoked');\r\n    dispatch({type: \"HOW_TO\"});\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <Typography variant=\"h6\" className={classes.title}>\r\n            Salesforce Package.xml Generator\r\n          </Typography>\r\n          <Button color=\"inherit\" \r\n            onClick={updatePackageXML}\r\n            variant=\"outlined\" \r\n            className={classes.button}\r\n            startIcon={<DescriptionIcon/>}>\r\n            Update Package.xml\r\n          </Button>\r\n          <Button color=\"inherit\" \r\n            onClick={copyToClipboard}\r\n            variant=\"outlined\"\r\n            className={classes.button}\r\n            startIcon={<FileCopyIcon/>}>\r\n            Copy To Clipboard\r\n          </Button>\r\n          <Button color=\"inherit\" \r\n            onClick={handleHowTo}\r\n            variant=\"outlined\"\r\n            className={classes.button}\r\n            startIcon={<HelpOutlineIcon/>}>\r\n            How To\r\n          </Button>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n}\r\n","import React,{useState,useContext} from 'react';\r\nimport { GlobalContext } from \"../App\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\r\nimport Paper from '@material-ui/core/Paper';//Added for #35\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    minWidth: 275,\r\n  },\r\n  title: {\r\n    fontSize: 10,\r\n  },\r\n  pos: {\r\n    marginBottom: 12,\r\n  }\r\n});\r\n\r\nexport default function MetadataType() {\r\n  const classes = useStyles();\r\n  const { globalState, dispatch }= useContext(GlobalContext);\r\n  const [filterKey,setFilterKey] = useState(\"\");\r\n  \r\n  const handleCheckboxChange = (evt,metadataType)=>{\r\n    evt.stopPropagation();\r\n    console.log('handleCheckboxChange invoked MetadataType.js');\r\n    const isChecked=evt.target.checked;\r\n    metadataType.isSelected=isChecked;\r\n    metadataType.isIndeterminate=false;//reset indeterminate state\r\n    console.log(metadataType);\r\n    dispatch({type: \"MDATA_TYPE_CHECKBOX_STATE_CHANGE\" , payload : metadataType});\r\n    //window.scrollTo(0, 0);Commented for #35\r\n    \r\n  };\r\n\r\n const handleMetadataClick = (evt,metadataType)=>{\r\n    evt.stopPropagation();\r\n    console.log('handleMetadataClick invoked MetadataType.js');\r\n    console.log(metadataType);\r\n    dispatch({type: \"MDATA_TYPE_CLICK\" , payload : metadataType});\r\n    //window.scrollTo(0, 0);Commented for #35\r\n  };\r\n\r\n  const handleSelectAll =()=>{\r\n    console.log(\"handleSelectAll MetadataType.js\");\r\n    let parNodeArr=[];\r\n    let skippedMetadataTypes=[];   \r\n\r\n    const metadataTypes=globalState.metadataTypes.map(metadataType => {\r\n      \r\n    if(!metadataType.inFolder && !metadataType.isChildXMLName){\r\n      parNodeArr.push(metadataType.id);\r\n      metadataType.isSelected=true;\r\n      metadataType.isIndeterminate=false;//reset indeterminate state\r\n    }else{\r\n      skippedMetadataTypes.push(metadataType.id);\r\n    }\r\n\r\n      return metadataType;\r\n    });\r\n      //Added for #18 - starts\r\n    if(skippedMetadataTypes && skippedMetadataTypes.length>0){\r\n      console.log(\"skippedMetadataTypes\");\r\n      console.log(skippedMetadataTypes);\r\n      skippedMetadataTypes.sort();\r\n      //alert(\"The following Metadata Types will be skipped \"+skippedMetadataTypes.join());\r\n    }\r\n    //Added for #18 - ends\r\n    parNodeArr.sort();\r\n\r\n    dispatch({type: \"MDATA_TYPE_SELECT_ALL\" , payload : {metadataTypes,parNodeArr,skippedMetadataTypes}});\r\n  };\r\n\r\n  const handleClearAll=()=>{\r\n    console.log(\"handleClearAll MetadataType.js\");\r\n    dispatch({type: \"MDATA_TYPE_CLEAR_ALL\" });\r\n  };\r\n\r\n  const handleFilterKeyChange=(event)=>{\r\n    let fKey=event.target.value;\r\n    fKey=fKey?fKey:'';\r\n    setFilterKey(fKey);\r\n  }\r\n\r\n  return (\r\n    <Card className={classes.root} variant=\"outlined\">\r\n\t\t<CardHeader\r\n      titleTypographyProps={{variant:'h6' }}\r\n\t\t\ttitle=\"Metadata Types\"\r\n      action={\r\n        <React.Fragment>\r\n        <Button color=\"secondary\" onClick={handleSelectAll}><strong>Select All</strong></Button>\r\n        <Button onClick={handleClearAll}>Clear All</Button>\r\n        </React.Fragment>\r\n      }\r\n      \r\n      />\r\n      <CardContent>\r\n        <TextField\r\n        id=\"input-with-icon-textfield\"\r\n        variant=\"outlined\"\r\n        placeholder=\"Filter Metadata Types..\"\r\n        value={filterKey}\r\n        onChange={handleFilterKeyChange}\r\n        size=\"small\"\r\n        InputProps={{\r\n        startAdornment: (\r\n          <InputAdornment position=\"start\">\r\n          <SearchIcon />\r\n          </InputAdornment>\r\n        ),\r\n        }}\r\n        fullWidth\r\n        />\r\n      {/*Added for #35*/}\r\n        <Paper style={{maxHeight: 500, overflow: 'auto'}}>\r\n        <List dense component=\"nav\" aria-label=\"Metadata Types\">\r\n        {globalState.metadataTypes.map(metadataType =>{\r\n\r\n          if(metadataType.id.toUpperCase().includes(filterKey.toUpperCase())){\r\n            return(\r\n              <ListItem button key={metadataType.id} onClick={evt=>handleMetadataClick(evt,metadataType)}\r\n              selected={metadataType.id===globalState.selectedMetadataType.id}\r\n              title='Click to view available Metadata Components'>\r\n              <ListItemIcon>\r\n                    <Checkbox\r\n                      edge=\"start\"\r\n                      tabIndex={-1}\r\n                      disableRipple\r\n                      inputProps={{ 'aria-labelledby': 'labelId' }}\r\n                      checked={metadataType.isSelected}\r\n                      indeterminate={metadataType.isIndeterminate}\r\n                      onClick={evt=>handleCheckboxChange(evt,metadataType)}\r\n                      \r\n                    />\r\n              </ListItemIcon>\r\n              <ListItemText primary={metadataType.id}/>\r\n              <ListItemSecondaryAction>\r\n                  <IconButton edge=\"end\" aria-label=\"comments\" \r\n                    onClick={evt=>handleMetadataClick(evt,metadataType)}>\r\n                    <NavigateNextIcon />\r\n                  </IconButton>\r\n              </ListItemSecondaryAction>\r\n            </ListItem>  \r\n          );\r\n          }else{\r\n            return <></>;\r\n          }\r\n          \r\n        })\r\n      } \r\n        \r\n      </List>\r\n      </Paper>\r\n      {/*Added for #35*/}\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n","import React,{useState,useContext} from 'react';\r\nimport { GlobalContext } from \"../App\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Paper from '@material-ui/core/Paper';//Added for #35\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    minWidth: 275,\r\n  },\r\n  title: {\r\n    fontSize: 10,\r\n  },\r\n  pos: {\r\n    marginBottom: 12,\r\n  }\r\n});\r\n\r\nexport default function ComponentList({selectedMetadataType,isShowChildren}) {\r\n  const classes = useStyles();\r\n  const { dispatch }= useContext(GlobalContext);\r\n  const [filterKey,setFilterKey] = useState(\"\");\r\n\r\n  const handleComponentClick = (component,evt)=>{\r\n    console.log(\"handleComponentClick invoked ComponentList.js\");\r\n    const isChecked=evt.target.checked;\r\n    const compId=component.id;\r\n    selectedMetadataType.children=selectedMetadataType.children.map(child=>{\r\n      if(compId===child.id){\r\n        child.isSelected=isChecked;//update the child state\r\n      }\r\n      return child;\r\n    });\r\n\r\n    selectedMetadataType=updateMetadataType(selectedMetadataType);\r\n    dispatch({type: \"COMPONENT_CHECKBOX_STATE_CHANGE\" , payload : selectedMetadataType});\r\n    \r\n  };\r\n\r\n  const updateMetadataType = (selectedMetadataType)=>{\r\n    console.log(\"updateMetadataType invoked ComponentList.js\");\r\n\r\n    const selectedChildrenArr=selectedMetadataType.children.filter(child=>child.isSelected);\r\n    if(selectedChildrenArr.length===0){\r\n      //None of the children is selected\r\n      selectedMetadataType.isSelected=false;\r\n      selectedMetadataType.isIndeterminate=false;\r\n    }else if(selectedChildrenArr.length===selectedMetadataType.children.length){\r\n      //ALl the children are selected\r\n      selectedMetadataType.isSelected=true;\r\n      selectedMetadataType.isIndeterminate=false;\r\n    }else{\r\n      //Some the children are selected\r\n      selectedMetadataType.isSelected=false;\r\n      selectedMetadataType.isIndeterminate=true;\r\n    }\r\n\r\n    return selectedMetadataType;\r\n\r\n  };\r\n\r\n  const handleSelectAll = ()=>{\r\n     selectedMetadataType.children=selectedMetadataType.children.map(child=>{\r\n       if(filterKey === \"\"){\r\n        child.isSelected=true;//update the child state \r\n        return child;\r\n       }\r\n       if(child.text.toUpperCase().includes(filterKey.toUpperCase()))\r\n     \t\t child.isSelected=true;//update the child state \r\n          return child;\r\n    });\r\n\r\n    //All the children are selected\r\n    if(filterKey === \"\"){\r\n    selectedMetadataType.isSelected=true;\r\n    selectedMetadataType.isIndeterminate=false;\r\n    dispatch({type: \"COMPONENT_CHECKBOX_STATE_CHANGE\" , payload : selectedMetadataType});\r\n\r\n    return;\r\n  }\r\n   selectedMetadataType = updateMetadataType(selectedMetadataType);\r\n   dispatch({type: \"COMPONENT_CHECKBOX_STATE_CHANGE\" , payload : selectedMetadataType});\r\n\r\n   return;\r\n  };\r\n\r\n  const handleClearAll = ()=>{\r\n    selectedMetadataType.children=selectedMetadataType.children.map(child=>{\r\n      child.isSelected=false;//update the child state\r\n      return child;\r\n    });\r\n\r\n    //None of the children are selected\r\n    selectedMetadataType.isSelected=false;\r\n    selectedMetadataType.isIndeterminate=false;\r\n    dispatch({type: \"COMPONENT_CHECKBOX_STATE_CHANGE\" , payload : selectedMetadataType});\r\n  };\r\n\r\n  const handleFilterKeyChange=(event)=>{\r\n    let fKey=event.target.value;\r\n    fKey=fKey?fKey:'';\r\n    setFilterKey(fKey);\r\n  }\r\n\r\n  return (\r\n    <Card className={classes.root} variant=\"outlined\">\r\n\t\t<CardHeader\r\n      titleTypographyProps={{variant:'h6' }}\r\n\t\t\ttitle={selectedMetadataType.text!==''?selectedMetadataType.text:'Available Components'}\r\n      action={\r\n        <React.Fragment>\r\n        <Button onClick={handleSelectAll}>Select All</Button>\r\n        <Button onClick={handleClearAll}>Clear All</Button>\r\n        </React.Fragment>\r\n      }\r\n      \r\n      />\r\n      <CardContent>\r\n      <TextField\r\n      id=\"input-with-icon-textfield\"\r\n      variant=\"outlined\"\r\n      placeholder={selectedMetadataType.text!==''?'Filter '+selectedMetadataType.text+'..':'Filter Components..'}\r\n      value={filterKey}\r\n      onChange={handleFilterKeyChange}\r\n      size=\"small\"\r\n      InputProps={{\r\n      startAdornment: (\r\n        <InputAdornment position=\"start\">\r\n        <SearchIcon />\r\n        </InputAdornment>\r\n      ),\r\n      }}\r\n      fullWidth\r\n      />\r\n      {/*Added for #35*/}\r\n      <Paper style={{maxHeight: 500, overflow: 'auto'}}>\r\n      <FormGroup>\r\n        {\r\n            selectedMetadataType.children.map(child=>{\r\n             \r\n              if(child.text.toUpperCase().includes(filterKey.toUpperCase())){\r\n             \r\n                return (\r\n                  <FormControlLabel\r\n                    control={<Checkbox value={child.id} checked={child.isSelected}\r\n                    onClick={evt=>handleComponentClick(child,evt)}/>}\r\n                    label={child.text}/>\r\n                )\r\n\r\n              }else{\r\n                return <></>;\r\n              }\r\n\r\n            })\r\n\r\n        }\r\n        \r\n      </FormGroup>\r\n      </Paper>\r\n      {/*Added for #35*/}\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\n","export const reducer = (state, action) => {\r\n\tswitch (action.type) {\r\n\t  \tcase \"INIT_LOAD_REQUEST\":\r\n\t\t\treturn processInitialRequest(state);\r\n\t\r\n\t\tcase \"INIT_LOAD_RESPONSE\":\r\n\t\t\treturn processInitialResponse(state, action);\r\n\r\n        case \"MDATA_TYPE_CHECKBOX_STATE_CHANGE\":\r\n            return processMetadataTypeCheckBox(state,action);\r\n        \r\n        case \"MDATA_TYPE_CLICK\":\r\n            return processMetadataTypeClick(state,action);\r\n\r\n        case \"FETCH_CHILDREN_RESPONSE\":\r\n            return processFetchChildrenResponse(state,action);\r\n\r\n        case \"COMPONENT_CHECKBOX_STATE_CHANGE\":\r\n            return processComponentCheckBox(state,action);\r\n\r\n        case \"MDATA_TYPE_SELECT_ALL\":\r\n            return processMetadataSelectAll(state,action);\r\n\r\n        case \"MDATA_TYPE_CLEAR_ALL\":\r\n            return processMetadataClearAll(state,action);\r\n\r\n        case \"UPDATE_PACKAGE_XML\":\r\n            return processUpdatePackageXml(state,action);\r\n        \r\n        case \"COPY_TO_CLIPBOARD\":\r\n            return processCopyToClipboard(state,action);\r\n        \r\n        case \"HOW_TO\":\r\n            return processHowTo(state,action);\r\n\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n  };\r\n  \r\n const processInitialRequest= (state)=>{\r\n\tstate.vscode.postMessage({\r\n        command: 'INIT_LOAD_REQUEST'\r\n\t  });\r\n\treturn state;\r\n }; \r\n\r\n const processInitialResponse = (state, action)=>{\r\n    console.log('processInitialResponse invoked');\r\n    let metadataTypes=[]; \r\n\tconst payload=action.payload;\r\n\tlet metadataObjects=payload.metadataObjects;\r\n\tconst mpExistingPackageXML=payload.mpExistingPackageXML;\r\n    metadataObjects=processChildXMLNames(metadataObjects);\r\n    \r\n    metadataObjects.sort((obj1,obj2)=>{\r\n        if (obj1.xmlName > obj2.xmlName) return 1; // if the first value is greater than the second\r\n        if (obj1.xmlName === obj2.xmlName) return 0; // if values are equal\r\n        if (obj1.xmlName < obj2.xmlName) return -1; // if the first value is less than the second\r\n        \r\n    });\r\n\r\n    metadataObjects.forEach(metadataObj =>{\r\n        let xmlName=metadataObj.xmlName;\r\n        let isChildXMLName=(metadataObj.isChildXMLName)?metadataObj.isChildXMLName:false;//Added for #18\r\n\r\n        if(mpExistingPackageXML[xmlName]){\r\n            //metadata already selected in existing package.xml\r\n            let members=mpExistingPackageXML[xmlName];\r\n            let childArr=[];\r\n            let isWildChar=false;\r\n            let parNode={};\r\n            for(let c=0;c<members.length;c++){\r\n                let childName=members[c];\r\n                \r\n                if(childName==='*'){\r\n                    isWildChar=true;\r\n                    //childArr.push({\"id\" : xmlName+'.'+\"loading\", \"text\" : LOADING, isSelected:false});\r\n                    continue;//change to break\r\n                }\r\n\r\n                let child={\r\n                    \"id\" : xmlName+'.'+childName,\r\n                    \"text\" : childName,\r\n                    isSelected  : true  // is the node selected\r\n                };\r\n\r\n                childArr.push(child);\r\n            }\r\n                //Modified for #18\r\n                parNode={\r\n                    \"id\" : xmlName,\r\n                    \"text\" : xmlName, \r\n                    children : childArr,\r\n                    inFolder : metadataObj.inFolder ,\r\n                    isChildXMLName:isChildXMLName,\r\n                    isRefreshedFromServer : false,\r\n                    isParent  : true, \r\n                    isSelected  : isWildChar,// is the parent node selected\r\n                    isIndeterminate : !isWildChar\r\n                }  \r\n\r\n                metadataTypes.push(parNode);\r\n        }else{\r\n             //Modified for #18\r\n             metadataTypes.push({ \r\n                \"id\" : xmlName,\r\n                \"text\" : xmlName,\r\n                isRefreshedFromServer : false,\r\n                isChildXMLName:isChildXMLName,\r\n                children : [],\r\n                inFolder : metadataObj.inFolder,\r\n                isParent  : true,\r\n                isSelected  : false,// is the parent node selected\r\n                isIndeterminate : false\r\n             }\r\n            );\r\n        }\r\n    });\r\n\r\n    console.log(metadataTypes);\r\n    return {...state, metadataTypes};\r\n\r\n };\r\n\r\n const processChildXMLNames= (metadataObjects)=>{\r\n    let combinedArr=[];\r\n    for(let i=0;i<metadataObjects.length;i++){\r\n        combinedArr.push(metadataObjects[i]);\r\n\r\n        if(metadataObjects[i].childXmlNames){\r\n            metadataObjects[i].childXmlNames.forEach(childXmlName => {\r\n                let childObj={};\r\n                childObj.xmlName=childXmlName;\r\n                childObj.inFolder=false;\r\n                childObj.isChildXMLName=true;\r\n                combinedArr.push(childObj);\r\n            });\r\n\r\n        }\r\n    }\r\n\r\n    return combinedArr;\r\n};\r\n\r\nconst processMetadataTypeCheckBox= (state,action)=>{\r\n    console.log('processMetadataTypeCheckBox invoked');\r\n    const metadataType=action.payload;\r\n    console.log(metadataType);\r\n    const vscode=state.vscode;\r\n    state=updateMetadataType(state,metadataType);\r\n    const selectedMetadataType=metadataType;\r\n    //update checked state for all its children\r\n    let updatedChildren=metadataType.children.map(child=>{\r\n        child.isSelected=metadataType.isSelected;\r\n        return child;\r\n    });\r\n    metadataType.children=updatedChildren;\r\n\r\n    if(!metadataType.isRefreshedFromServer){\r\n        vscode.postMessage({\r\n            command: 'FETCH_CHILDREN_REQUEST',\r\n            metadataType : metadataType\r\n          });\r\n    }\r\n\r\n    state.selectedMetadataType=selectedMetadataType;\r\n\r\n    return {...state};\r\n};\r\n\r\nconst processMetadataTypeClick= (state,action)=>{\r\n    console.log('processMetadataTypeClick invoked');\r\n    const metadataType=action.payload;\r\n    console.log(metadataType);\r\n    const vscode=state.vscode;\r\n    state=updateMetadataType(state,metadataType);\r\n    const selectedMetadataType=metadataType;\r\n    \r\n    if(!metadataType.isRefreshedFromServer){\r\n        vscode.postMessage({\r\n            command: 'FETCH_CHILDREN_REQUEST',\r\n            metadataType : metadataType\r\n          });\r\n    }\r\n\r\n    state.selectedMetadataType=selectedMetadataType;\r\n\r\n    return {...state};\r\n};\r\n\r\nconst updateMetadataType = (state,metadataType)=>{\r\n    const metadataTypes=state.metadataTypes;\r\n    const newMetadataTypes=metadataTypes.map(mTypeItr=>{\r\n        if(metadataType.id===mTypeItr.id){\r\n            return metadataType;\r\n        }\r\n\r\n        return mTypeItr;\r\n    });\r\n    state.metadataTypes=newMetadataTypes;\r\n    return state;\r\n};\r\n\r\nconst processFetchChildrenResponse=(state,action)=>{\r\n    console.log(\"processFetchChildrenResponse invoked\");\r\n    let message=action.payload;\r\n    let results=message.results;\r\n    let metadataTypeId=message.metadataType;\r\n\r\n    let childrenArr=[];\r\n    //let mpChildren=new Map();\r\n            \r\n    if(!results || results.length===0){\r\n        console.log('No children');\r\n        childrenArr=[];\r\n        \r\n    }else if( !Array.isArray(results)){\r\n        console.log(\"listmetadata results.fullName \"+results.fullName);\r\n        childrenArr.push({ \"id\" : metadataTypeId+'.'+results.fullName, \"text\" : results.fullName})\r\n        //mpChildren.set(metadataTypeId+'.'+results.fullName,results.fullName);\r\n    }else{\r\n        for(let i=0;i<results.length;i++){\r\n            let node=results[i];\r\n            console.log(\"listmetadata node.fullName \"+node.fullName);\r\n            childrenArr.push({ \"id\" : metadataTypeId+'.'+node.fullName, \"text\" : node.fullName});\r\n            //mpChildren.set(metadataTypeId+'.'+node.fullName,node.fullName);\r\n            \r\n        }\r\n    }\r\n\r\n    childrenArr.sort((obj1,obj2)=>{\r\n        if (obj1.text > obj2.text) return 1; // if the first value is greater than the second\r\n        if (obj1.text === obj2.text) return 0; // if values are equal\r\n        if (obj1.text < obj2.text) return -1; // if the first value is less than the second\r\n    });\r\n\r\n    const newMetadataTypes=state.metadataTypes.map(mTypeItr=>{\r\n        if(metadataTypeId===mTypeItr.id){\r\n            let isParMetadataSelected=mTypeItr.isSelected;\r\n            mTypeItr.isRefreshedFromServer=true;//Server fetch done\r\n            let oldChildArr = mTypeItr.children;//old children\r\n            let selChildCount=0;\r\n            mTypeItr.children=childrenArr.map(child=>{\r\n                //update the children\r\n                if(isParMetadataSelected){\r\n                    //if parent is selected, child is automatically selected\r\n                    child.isSelected=true;\r\n                }else{\r\n                    //if old child is selected, new child is also selected\r\n                    let oldChild = oldChildArr.find(item=>{\r\n                        return item.id===child.id;\r\n                    });\r\n    \r\n                    if(oldChild){\r\n                        //transfer all the existing properties to new child\r\n                        child.isSelected= oldChild.isSelected;\r\n                        if(child.isSelected){\r\n                            selChildCount++;\r\n                        }\r\n                    }else{\r\n                        //old child doesnot exist, unselected by default\r\n                        child.isSelected=false;\r\n                    }\r\n                }\r\n                \r\n                return child;\r\n\r\n            });\r\n            \r\n            if(childrenArr.length!==0 && selChildCount===childrenArr.length){\r\n                mTypeItr.isSelected=true;\r\n                mTypeItr.isIndeterminate=false;\r\n            }\r\n\r\n            state.selectedMetadataType=mTypeItr;//update selectedMetadataType\r\n        }\r\n        \r\n        return mTypeItr;\r\n    });\r\n\r\n    state.metadataTypes=newMetadataTypes;\r\n    console.log(newMetadataTypes);\r\n    return {...state};\r\n\r\n};\r\n\r\nconst processComponentCheckBox=(state,action)=>{\r\n    console.log(\"processComponentCheckBox invoked\");\r\n    const selectedMetadataType=action.payload;\r\n    console.log(selectedMetadataType);\r\n    state.selectedMetadataType=selectedMetadataType;\r\n    return {...state};\r\n};\r\n\r\nconst processMetadataSelectAll=(state,action)=>{\r\n    console.log('processMetadataSelectAll invoked');\r\n    const payload=action.payload;\r\n    const vscode=state.vscode;\r\n    state.metadataTypes=payload.metadataTypes;\r\n    vscode.postMessage({\r\n        command: 'selectAll',\r\n        selectedMetadata : payload.parNodeArr,\r\n        skippedMetadataTypes : payload.skippedMetadataTypes//Added for #18\r\n    });\r\n    console.log(state.metadataTypes);\r\n    return {...state};\r\n\r\n};\r\n\r\nconst processMetadataClearAll=(state,action)=>{\r\n    console.log('processMetadataClearAll invoked');\r\n    //reset selectedMetadataType \r\n    state.selectedMetadataType={id:'',children:[]};\r\n\r\n    //reset metadataTypes & its children\r\n    state.metadataTypes=state.metadataTypes.map(metadataType=>{\r\n        metadataType.isRefreshedFromServer= false;\r\n        metadataType.children = [];\r\n        metadataType.isSelected = false;\r\n        metadataType.isIndeterminate=false;\r\n        return metadataType;\r\n    });\r\n\r\n    console.log(state.metadataTypes);\r\n    return {...state};\r\n};\r\n\r\nconst processUpdatePackageXml=(state,action)=>{\r\n    const vscode=state.vscode;\r\n    vscode.postMessage({\r\n        command: 'UPDATE_PACKAGE_XML',\r\n        metadataTypes : state.metadataTypes\r\n    });\r\n\r\n    return state;\r\n};\r\n\r\nconst processCopyToClipboard=(state,action)=>{\r\n    const vscode=state.vscode;\r\n    vscode.postMessage({\r\n        command: 'COPY_TO_CLIPBOARD',\r\n        metadataTypes : state.metadataTypes\r\n    });\r\n\r\n    return state;\r\n};\r\n\r\nconst processHowTo=(state,action)=>{\r\n    const vscode=state.vscode;\r\n    vscode.postMessage({\r\n        command: 'OPEN_URL',\r\n        url : 'https://youtu.be/uXwIMh8bK0A'\r\n    });\r\n\r\n    return state;\r\n};","import React, { createContext, useReducer, useEffect } from 'react';\r\nimport { vscode } from \"./index\";\r\nimport './App.css';\r\nimport AppHeader from \"./components/AppHeader\";\r\nimport MetadataType from \"./components/MetadataType\";\r\nimport ComponentList from \"./components/ComponentList\";\r\nimport { createMuiTheme, makeStyles, ThemeProvider } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport {reducer} from \"./context/reducer\";\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  }\r\n}));\r\n\r\nexport const GlobalContext = createContext();\r\n\r\n\r\nfunction App() {\r\n  const classes = useStyles();\r\n  const [globalState, dispatch] = useReducer(reducer, {'vscode' : vscode, metadataTypes : [], selectedMetadataType : {id:'',text:'',children:[]}, isShowChildren : false});\r\n  console.log(vscode);\r\n\r\n  const element = document.querySelector(\"body\");\r\n\r\n  const prefersDarkMode = element.classList.contains(\"vscode-dark\");\r\n  //const prefersDarkMode = useMediaQuery('(body.vscode-dark)');\r\n\r\n  const preferredTheme = createMuiTheme({\r\n    palette: {\r\n      // Switching the dark mode on is a single property value change.\r\n      type: prefersDarkMode ? 'dark' : 'light',\r\n    },\r\n  });\r\n\r\n  useEffect(()=>{\r\n    console.log('Inside INIT_LOAD_REQUEST useEffect() App.js');\r\n    dispatch({ type: \"INIT_LOAD_REQUEST\" });\r\n  },[globalState.vscode]);\r\n\r\n  \r\nuseEffect(()=>{\r\n  console.log('Inside messageEventListener useEffect() App.js');\r\n    const messageEventListener= (event) => {\r\n      const message = event.data; // The json data that the extension sent\r\n      console.log(event.data);\r\n      switch (message.command) {\r\n          case 'metadataObjects':\r\n              let metadataObjects=message.metadataObjects;\r\n              console.log(\"Inside App.js metadataObjects event listener \"+metadataObjects.length);\r\n              dispatch({ type: \"INIT_LOAD_RESPONSE\" , payload : message});\r\n              break;\r\n          \r\n          case 'listmetadata':\r\n            console.log(\"Inside App.js listmetadata event listener\");\r\n            dispatch({ type: \"FETCH_CHILDREN_RESPONSE\" , payload : message});\r\n            break;\r\n\r\n          default:\r\n            break;\r\n          \r\n      }\r\n    }\r\n\r\n    window.addEventListener('message', messageEventListener);\r\n    return ()=>{\r\n      window.removeEventListener('message', messageEventListener);\r\n    };\r\n},[globalState.vscode]);\r\n\r\n  return (\r\n    <ThemeProvider theme={preferredTheme}>\r\n    <GlobalContext.Provider value={{ globalState, dispatch }}>\r\n      <div className={classes.root}>\r\n        <Grid container spacing={1}>\r\n          <Grid item xs={12}>\r\n            <Paper><AppHeader/></Paper>\r\n          </Grid>\r\n          <Grid item xs={6}>\r\n            <Paper><MetadataType/></Paper>\r\n          </Grid>\r\n          <Grid item xs={6}>\r\n            <Paper>\r\n             {globalState.selectedMetadataType.id!=='' &&\r\n              <ComponentList selectedMetadataType={globalState.selectedMetadataType} isShowChildren={globalState.isShowChildren}/>\r\n              }\r\n            </Paper>\r\n          </Grid>\r\n          </Grid>\r\n          </div>\r\n    </GlobalContext.Provider>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nexport const vscode = window.acquireVsCodeApi();//Only one instance per app.\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}